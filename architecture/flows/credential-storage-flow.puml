@startuml Credential-Storage-Flow
!theme plain
skinparam sequenceMessageAlign center

title Credential Storage Flow - Receiving & Storing VCs (Phase 3)

actor "User" as user
participant "QR Scanner" as scanner
participant "Receive VC\nScreen" as receive_screen
participant "Credential\nService" as cred_service
participant "OID4VCI\nHandler" as oid4vci
participant "Veramo\nCredential Plugin" as vc_plugin
participant "Verification\nService" as verify_service
participant "Branding\nService" as branding

participant "Issuer\nOID4VCI API" as issuer_api

database "SQLite\nDatabase" as db

== Step 1: User Scans QR Code (STORY-040) ==

user -> scanner: Opens camera
activate scanner
scanner --> user: Shows camera view

user -> scanner: Scans issuer QR code
scanner -> scanner: Decodes QR:\nopenid-credential-offer://\n?credential_offer_uri=https://...

scanner -> receive_screen: Navigate with offer URL
deactivate scanner

== Step 2: Parse Credential Offer ==

activate receive_screen
receive_screen -> oid4vci: parseOffer(offerUri)
activate oid4vci

oid4vci -> issuer_api: GET credential_offer_uri
activate issuer_api
issuer_api --> oid4vci: Credential Offer JSON {\n  credential_issuer: "https://uni.edu",\n  credentials: ["UniversityDegree"],\n  grants: {...}\n}
deactivate issuer_api

oid4vci --> receive_screen: Parsed offer
deactivate oid4vci

== Step 3: Fetch Issuer Metadata ==

receive_screen -> oid4vci: getIssuerMetadata()
activate oid4vci

oid4vci -> issuer_api: GET /.well-known/\nopenid-credential-issuer
activate issuer_api
issuer_api --> oid4vci: Issuer metadata {\n  credential_endpoint: "...",\n  credentials_supported: [...]\n}
deactivate issuer_api

oid4vci --> receive_screen: Issuer info
deactivate oid4vci

== Step 4: Preview Credential (STORY-040) ==

receive_screen -> branding: getBranding(issuerMetadata)
activate branding
branding --> receive_screen: Logo, colors, issuer name
deactivate branding

receive_screen --> user: Shows preview:\n- Issuer: "University Name"\n- Credential: "Bachelor Degree"\n- Logo, branding

user -> receive_screen: Reviews preview

== Step 5: User Accepts ==

user -> receive_screen: Taps "Accept Credential"
receive_screen -> receive_screen: Show loading

receive_screen -> cred_service: receiveCredential(\n  offer,\n  holderDID: "did:jwk:..."\n)

== Step 6: Credential Service Orchestration (STORY-035) ==

activate cred_service

cred_service -> oid4vci: Initiate authorization
activate oid4vci

alt Pre-authorized flow
    oid4vci -> oid4vci: Use pre-authorized code\nfrom offer
else Authorization code flow
    oid4vci -> issuer_api: GET /authorize
    issuer_api --> oid4vci: Auth code
    oid4vci -> issuer_api: POST /token
    issuer_api --> oid4vci: Access token
end

== Step 7: Request Credential ==

oid4vci -> issuer_api: POST /credential\nAuthorization: Bearer {token}\nBody: {\n  format: "jwt_vc_json",\n  credential_definition: {...},\n  proof: { proof_type: "jwt", jwt: "..." }\n}

note right
  **Proof JWT**: Signed by holder
  - Header: { alg, kid: holderDID#key }
  - Payload: { iss: holderDID, aud: issuer, nonce }
  - Signature: Signed with holder's private key
  
  Proves holder controls the DID!
end note

activate issuer_api
issuer_api -> issuer_api: Validates proof JWT
issuer_api -> issuer_api: Creates Verifiable Credential
issuer_api -> issuer_api: Signs VC with issuer key

issuer_api --> oid4vci: Credential response {\n  format: "jwt_vc_json",\n  credential: "eyJhbGci..."\n}
deactivate issuer_api

oid4vci --> cred_service: Encoded VC (JWT)
deactivate oid4vci

== Step 8: Verify Received Credential (STORY-036) ==

cred_service -> verify_service: verifyCredential(vcJwt)
activate verify_service

verify_service -> vc_plugin: Decode JWT
activate vc_plugin
vc_plugin --> verify_service: VC object {\n  issuer: "did:web:uni.edu",\n  credentialSubject: {\n    id: "did:jwk:...",\n    degree: "Bachelor"\n  },\n  issuanceDate: "2024-01-01",\n  expirationDate: "2029-01-01"\n}
deactivate vc_plugin

verify_service -> verify_service: 1. Verify signature
note right
  - Resolve issuer DID
  - Get issuer public key
  - Verify JWT signature
end note

verify_service -> verify_service: 2. Check expiration
note right: Compare expirationDate with current date

verify_service -> "Status List\nAPI": 3. Check revocation status
activate "Status List\nAPI"
"Status List\nAPI" --> verify_service: Not revoked
deactivate "Status List\nAPI"

alt All checks pass
    verify_service --> cred_service: Verification result {\n  verified: true,\n  status: "valid"\n}
else Any check fails
    verify_service --> cred_service: Verification result {\n  verified: false,\n  error: "..."\n}
    cred_service --> receive_screen: Show error
    deactivate cred_service
    deactivate verify_service
    receive_screen --> user: "Credential invalid"
    deactivate receive_screen
end
deactivate verify_service

== Step 9: Extract Branding (STORY-037) ==

cred_service -> branding: extractBranding(vc)
activate branding

branding -> branding: Parse credentialBranding field
branding -> branding: Extract:\n- backgroundColor\n- textColor\n- logo (URL)

alt Has logo URL
    branding -> "Image\nDownloader": Download logo
    activate "Image\nDownloader"
    "Image\nDownloader" --> branding: Logo image
    deactivate "Image\nDownloader"
end

branding -> "Branding\nCache": Cache branding
branding --> cred_service: Branding data
deactivate branding

== Step 10: Store Credential (STORY-034, 035) ==

cred_service -> db: BEGIN TRANSACTION
activate db

cred_service -> db: INSERT INTO credentials {\n  id: UUID,\n  raw: vcJwt,\n  issuer: "did:web:uni.edu",\n  subject: "did:jwk:...",\n  issuanceDate: "2024-01-01",\n  expirationDate: "2029-01-01"\n}

cred_service -> db: INSERT INTO credential_metadata {\n  credential_id: UUID,\n  type: "UniversityDegree",\n  category: "Education",\n  display_name: "Bachelor Degree",\n  issuer_name: "University Name",\n  logo_url: "...",\n  background_color: "#003366",\n  text_color: "#FFFFFF"\n}

cred_service -> db: COMMIT
db --> cred_service: Stored
deactivate db

cred_service --> receive_screen: Success {\n  credential,\n  branding\n}
deactivate cred_service

== Step 11: Show Success ==

receive_screen --> user: Shows success screen:\n"Credential saved!"\nAnimated checkmark

user -> receive_screen: Taps "View Credential"

receive_screen -> "Credential Detail\nScreen": Navigate with credential ID
activate "Credential Detail\nScreen"

"Credential Detail\nScreen" --> user: Shows beautiful\ncredential card with:\n- Branding colors\n- Logo\n- Claims\n- Verification badge âœ…
deactivate "Credential Detail\nScreen"

deactivate receive_screen

== What Got Stored ==

note over user, db
  **Stored Objects**:
  
  1. **Credential (credentials table)**:
     - id: UUID
     - raw: JWT string (original)
     - issuer: DID
     - subject: DID (holder)
     - type: array ["VerifiableCredential", "UniversityDegree"]
     - issuanceDate, expirationDate
     - credentialSubject: JSON
  
  2. **Metadata (credential_metadata table)**:
     - credential_id: FK to credentials
     - display_name: "Bachelor Degree in Computer Science"
     - issuer_name: "Stanford University"
     - category: "Education"
     - tags: ["degree", "university"]
     - logo_url, background_color, text_color
  
  3. **Branding (in-memory cache)**:
     - Logo image (cached)
     - Colors
     - Fast display
  
  **Result**: VC stored, verified, ready to display!
end note

@enduml
